id: postgres_taxi_pipeline
namespace: zoomcamp

inputs:
  - id: taxi
    type: SELECT
    displayName: Select NYC taxi type
    values: ["yellow", "green"]
    defaults: "yellow"

  - id: year
    type: SELECT
    displayName: Select year
    values: ["2019", "2020", "2021", "2022"]
    defaults: "2019"

  - id: month
    type: SELECT
    displayName: Select month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: "01"

variables:
  file: "{{ inputs.taxi }}_tripdata_{{ inputs.year }}-{{ inputs.month}}.csv"
  staging_table: "public.{{ inputs.taxi }}_tripdata_staging"
  table: "public.{{ inputs.taxi }}_tripdata"
  data: "{{ outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv'] }}"

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://host.docker.internal:5432/postgres_zoomcamp
      username: zoomcamp
      password: z00mc4mp

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{ render(vars.file) }}"
      taxi: "{{ inputs.taxi }}"
    
  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{ inputs.taxi }}/{{ render(vars.file) }}.gz | gunzip > {{ render(vars.file) }}


  - id: if_green
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'green' }}"
    then:
    - id: green_create_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        create table if not exists {{ render(vars.staging_table) }} (
          unique_row_id         text,
          filename              text,
          VendorID              text,
          lpep_pickup_datetime  timestamp,
          lpep_dropoff_datetime timestamp,
          store_and_fwd_flag    text,
          RatecodeID            text,
          PULocationID          text,
          DOLocationID          text,
          passenger_count       integer,
          trip_distance         decimal(10, 2),
          fare_amount           decimal(10, 2),
          extra                 decimal(10, 2),
          mta_tax               decimal(10, 2),
          tip_amount            decimal(10, 2),
          tolls_amount          decimal(10, 2),
          ehail_fee             decimal(10, 2),
          improvement_surcharge decimal(10, 2),
          total_amount          decimal(10, 2),
          payment_type          text,
          trip_type             text,
          congestion_surcharge  decimal(10, 2)
        );

    - id: green_create_table
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        create table if not exists {{ render(vars.table) }} (
          unique_row_id         text,
          filename              text,
          VendorID              text,
          lpep_pickup_datetime  timestamp,
          lpep_dropoff_datetime timestamp,
          store_and_fwd_flag    text,
          RatecodeID            text,
          PULocationID          text,
          DOLocationID          text,
          passenger_count       integer,
          trip_distance         decimal(10, 2),
          fare_amount           decimal(10, 2),
          extra                 decimal(10, 2),
          mta_tax               decimal(10, 2),
          tip_amount            decimal(10, 2),
          tolls_amount          decimal(10, 2),
          ehail_fee             decimal(10, 2),
          improvement_surcharge decimal(10, 2),
          total_amount          decimal(10, 2),
          payment_type          text,
          trip_type             text,
          congestion_surcharge  decimal(10, 2)
        );

    - id: green_truncate_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        truncate table {{ render(vars.staging_table) }};

    - id: green_copy_in_staging_table
      type: io.kestra.plugin.jdbc.postgresql.CopyIn
      format: CSV
      from: "{{ render(vars.data) }}"
      table: "{{ render(vars.staging_table) }}"
      header: true
      columns: [VendorID,lpep_pickup_datetime,lpep_dropoff_datetime,store_and_fwd_flag,RatecodeID,PULocationID,DOLocationID,passenger_count,trip_distance,fare_amount,extra,mta_tax,tip_amount,tolls_amount,ehail_fee,improvement_surcharge,total_amount,payment_type,trip_type,congestion_surcharge]

    - id: green_add_unique_id
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        update {{ render(vars.staging_table) }}
        set 
          unique_row_id = md5(
            coalesce(cast(VendorID AS text), '') ||
            coalesce(cast(lpep_pickup_datetime AS text), '') || 
            coalesce(cast(lpep_dropoff_datetime AS text), '') || 
            coalesce(PULocationID, '') || 
            coalesce(DOLocationID, '') || 
            coalesce(cast(fare_amount AS text), '') || 
            coalesce(cast(trip_distance AS text), '')      
          ),
          filename = '{{ render(vars.file) }}';

    - id: green_merge_data
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        merge into {{ render(vars.table) }} as t
        using {{ render(vars.staging_table) }} as s
        on t.unique_row_id = s.unique_row_id
        when not matched then
          insert (
            unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime,
            store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count,
            trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee,
            improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge
          )
          values (
            s.unique_row_id, s.filename, s.VendorID, s.lpep_pickup_datetime, s.lpep_dropoff_datetime,
            s.store_and_fwd_flag, s.RatecodeID, s.PULocationID, s.DOLocationID, s.passenger_count,
            s.trip_distance, s.fare_amount, s.extra, s.mta_tax, s.tip_amount, s.tolls_amount, s.ehail_fee,
            s.improvement_surcharge, s.total_amount, s.payment_type, s.trip_type, s.congestion_surcharge
          );
    

  - id: if_yellow
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'yellow' }}"
    then:

    - id: yellow_create_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        create table if not exists {{ render(vars.staging_table) }} (
          unique_row_id          text,
          filename               text,
          VendorID               text,
          tpep_pickup_datetime   timestamp,
          tpep_dropoff_datetime  timestamp,
          passenger_count        integer,
          trip_distance          decimal(10, 2),
          RatecodeID             text,
          store_and_fwd_flag     text,
          PULocationID           text,
          DOLocationID           text,
          payment_type           integer,
          fare_amount            decimal(10, 2),
          extra                  decimal(10, 2),
          mta_tax                decimal(10, 2),
          tip_amount             decimal(10, 2),
          tolls_amount           decimal(10, 2),
          improvement_surcharge  decimal(10, 2),
          total_amount           decimal(10, 2),
          congestion_surcharge   decimal(10, 2)
        );

    - id: yellow_create_table
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        create table if not exists {{ render(vars.table) }} (
          unique_row_id          text,
          filename               text,
          VendorID               text,
          tpep_pickup_datetime   timestamp,
          tpep_dropoff_datetime  timestamp,
          passenger_count        integer,
          trip_distance          decimal(10, 2),
          RatecodeID             text,
          store_and_fwd_flag     text,
          PULocationID           text,
          DOLocationID           text,
          payment_type           integer,
          fare_amount            decimal(10, 2),
          extra                  decimal(10, 2),
          mta_tax                decimal(10, 2),
          tip_amount             decimal(10, 2),
          tolls_amount           decimal(10, 2),
          improvement_surcharge  decimal(10, 2),
          total_amount           decimal(10, 2),
          congestion_surcharge   decimal(10, 2)
        );

    - id: yellow_truncate_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        truncate table {{ render(vars.staging_table) }};

    - id: yellow_copy_in_staging_table
      type: io.kestra.plugin.jdbc.postgresql.CopyIn
      format: CSV
      from: "{{ render(vars.data )}}"
      table: "{{ render(vars.staging_table) }}"
      header: true
      columns: [VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,PULocationID,DOLocationID,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,congestion_surcharge]

    - id: yellow_add_unique_id
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        update {{ render(vars.staging_table) }}
        set 
          unique_row_id = md5(
            coalesce(cast(VendorID AS text), '') ||
            coalesce(cast(tpep_pickup_datetime AS text), '') || 
            coalesce(cast(tpep_dropoff_datetime AS text), '') || 
            coalesce(PULocationID, '') || 
            coalesce(DOLocationID, '') || 
            coalesce(cast(fare_amount AS text), '') || 
            coalesce(cast(trip_distance AS text), '')      
          ),
          filename = '{{ render(vars.file) }}';

    - id: yellow_merge_data
      type: io.kestra.plugin.jdbc.postgresql.Query
      sql: |
        merge into {{ render(vars.table) }} as t
        using {{ render(vars.staging_table) }} as s
        on t.unique_row_id = s.unique_row_id
        when not matched then
          insert (
            unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
            passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
            DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
            improvement_surcharge, total_amount, congestion_surcharge
          )
          values (
            s.unique_row_id, s.filename, s.VendorID, s.tpep_pickup_datetime, s.tpep_dropoff_datetime,
            s.passenger_count, s.trip_distance, s.RatecodeID, s.store_and_fwd_flag, s.PULocationID,
            s.DOLocationID, s.payment_type, s.fare_amount, s.extra, s.mta_tax, s.tip_amount, s.tolls_amount,
            s.improvement_surcharge, s.total_amount, s.congestion_surcharge
          );
              

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: This will remove output files. If you'd like to explore Kestra outputs, disable it.